// Code generated by hertz generator.

package favorite

import (
	"context"
	"douyin/biz/config"
	favorite "douyin/biz/model/favorite"
	"douyin/biz/model/orm_gen"
	"douyin/biz/model/query"
	"douyin/biz/pack"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

// FavoriteAction .
// @router /douyin/favorite/action [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(favorite.DouyinFavoriteActionResponse)

	//设置数据库
	db, err := gorm.Open(mysql.Open(config.MySQLDSN), &gorm.Config{})
	query.SetDefault(db)

	//获取前端数据
	getToken := req.Token
	getVideoId := req.VideoId
	getActionType := req.ActionType
	isError := 0 //标记是否正确

	//检测action_type是否合法
	if getActionType != 1 && getActionType != 2 {
		isError = 1
	}

	//准备好原视频数据
	orginVideo, err := query.Q.Video.Where(query.Video.ID.Eq(getVideoId)).Take()
	if err != nil {
		isError = 1
	}
	//鉴定用户token
	myClaims, err := pack.ParseToken(getToken)

	if err != nil {
		isError = 1
	} else {
		userFavor, err := query.Q.User.Where(query.User.ID.Eq(myClaims.ID)).Take()
		if err != nil {
			//没有查到用户了属于是
			isError = 1
		} else {
			//通过ActionType确定是点赞还是取消
			if getActionType == 1 { //点赞
				//查找是否有重复数据
				_, err := query.Q.Favorite.Where(query.Favorite.UserID.Eq(myClaims.ID), query.Favorite.VideoID.Eq(getVideoId)).Take()
				if err != nil {
					query.Favorite.Create(&orm_gen.Favorite{UserID: userFavor.ID, VideoID: getVideoId})
					query.Video.Where(query.Video.ID.Eq(getVideoId)).Update(query.Video.FavoriteCount, orginVideo.FavoriteCount+1)
				} else {
					isError = 1
				}
			} else { //取消
				query.Favorite.Unscoped().Where(query.Favorite.UserID.Eq(myClaims.ID), query.Favorite.VideoID.Eq(getVideoId)).Delete()
				query.Video.Where(query.Video.ID.Eq(getVideoId)).Update(query.Video.FavoriteCount, orginVideo.FavoriteCount-1)
			}
		}
	}

	//返回信息
	if isError == 1 {
		resp = &favorite.DouyinFavoriteActionResponse{
			StatusCode: config.StatusInternalServerError,
			StatusMsg:  consts.StatusMessage(consts.StatusInternalServerError),
		}
	} else {
		resp = &favorite.DouyinFavoriteActionResponse{
			StatusCode: config.StatusOK,
			StatusMsg:  consts.StatusMessage(consts.StatusOK),
		}
	}

	c.JSON(consts.StatusOK, resp)
}

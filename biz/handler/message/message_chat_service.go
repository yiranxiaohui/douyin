// Code generated by hertz generator.

package message

import (
	"context"
	"douyin/biz/config"
	"douyin/biz/model/api"
	message "douyin/biz/model/message"
	"douyin/biz/model/query"
	"douyin/biz/pack"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

// MessageChat .
// @router /douyin/message/chat [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req message.DouyinMessageChatRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(message.DouyinMessageChatResponse)
	defer c.JSON(consts.StatusOK, resp)

	db, err := gorm.Open(mysql.Open(config.MySQLDSN), &gorm.Config{})
	query.SetDefault(db)

	getToken := req.GetToken()
	claims, err := pack.ParseToken(getToken)
	if err != nil {
		resp.StatusMsg = err.Error()
		resp.StatusCode = config.StatusInternalServerError
		return
	}
	Id := pack.ID{claims.ID}
	messages, err := query.Q.Message.Where(query.Message.FromUserID.Eq(Id.Id)).Or(query.Message.ToUserID.Eq(Id.Id)).Order(query.Message.CreateTime).Find()
	if err != nil {
		resp.StatusMsg = err.Error()
		resp.StatusCode = config.StatusInternalServerError
		return
	}
	for _, v := range messages {
		resp.MessageList = append(resp.MessageList, api.Message{
			Id:         v.ID,
			ToUserId:   v.ToUserID,
			FromUserId: v.FromUserID,
			Content:    v.Content,
			CreateTime: v.CreateTime,
		})
	}
	resp.StatusCode = config.StatusOK
	resp.StatusMsg = consts.StatusMessage(consts.StatusOK)
}

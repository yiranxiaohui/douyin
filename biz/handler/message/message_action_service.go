// Code generated by hertz generator.

package message

import (
	"context"
	"douyin/biz/config"
	"douyin/biz/model/orm_gen"
	"douyin/biz/model/query"
	"douyin/biz/pack"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"time"

	message "douyin/biz/model/message"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// MessageAction .
// @router /douyin/message/action [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req message.DouyinMessageActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(message.DouyinMessageActionResponse)

	defer c.JSON(consts.StatusOK, resp)

	db, err := gorm.Open(mysql.Open(config.MySQLDSN), &gorm.Config{})
	query.SetDefault(db)

	getToken := req.GetToken()
	claims, err := pack.ParseToken(getToken)
	if err != nil {
		resp.StatusMsg = err.Error()
		resp.StatusCode = config.StatusInternalServerError
		return
	}
	FromUserId := pack.ID{claims.ID}

	if req.GetActionType() == 1 {
		err := query.Message.Create(&orm_gen.Message{
			ID:         pack.GetSnowflakeId(),
			ToUserID:   req.GetToUserId(),
			FromUserID: FromUserId.Id,
			Content:    req.GetContent(),
			CreateTime: time.Now().Format("2006-01-02 15:04:05"),
		})
		if err != nil {
			resp.StatusMsg = err.Error()
			resp.StatusCode = config.StatusInternalServerError
			return
		}
	}
	resp.StatusCode = config.StatusOK
	resp.StatusMsg = consts.StatusMessage(consts.StatusOK)
}

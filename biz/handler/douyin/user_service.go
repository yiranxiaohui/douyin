// Code generated by hertz generator.

package douyin

import (
	"DouyinProject/biz/dal_douyin/mysql_douyin"
	"DouyinProject/biz/model/orm_gen"
	"DouyinProject/biz/model/query"
	"DouyinProject/biz/mytools"
	"context"
	"fmt"

	douyin "DouyinProject/biz/model/douyin"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(douyin.UserLoginResponse)
	//进行数据库初始化和一些数据准备
	mysql_douyin.Init()
	query.SetDefault(mysql_douyin.DB)
	var statusMsg = ""
	username := req.GetUsername()
	password := req.GetPassword()
	//查找最后一个用户从而获取ID值
	lastest, err := query.User.Last()
	if err != nil {
		fmt.Errorf("注册时查询最新客户失败 %v", err)
		statusMsg += "注册时查询最新客户失败！"
	}
	//查重
	find, err := query.User.Where(query.User.Username.In(username)).Find()
	if find == nil {
		err = query.User.Create(&orm_gen.User{ID: lastest.ID + 1, Username: username, Password: password, FollowCount: 0, FollowerCount: 0, IsFollow: 0})
		if err != nil {
			fmt.Errorf("注册时新增客户失败 %v", err)
			statusMsg += "注册时新增客户失败！"
		}
	}
	//是否出错
	if err != nil {
		resp = &douyin.UserLoginResponse{StatusCode: 500, Token: "", UserId: -1, StatusMsg: statusMsg}
	} else {
		resp = &douyin.UserLoginResponse{StatusCode: 0, Token: mytools.GetMD5String(username + password), UserId: lastest.ID + 1, StatusMsg: "success"}
	}
	//返回结果
	c.JSON(consts.StatusOK, resp)
}
